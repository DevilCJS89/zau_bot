#!/usr/bin/env python3

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import tf

##___INITIALIZATION___###
moveit_commander.roscpp_initialize(sys.argv)  # initialize the moveit commander
rospy.init_node('move_group_python_interface_tutorial',
                anonymous=True)  # initialize the node

robot = moveit_commander.RobotCommander()  # define the robot
scene = moveit_commander.PlanningSceneInterface()  # define the scene
# define the planning group (from the moveit packet 'manipulator' planning group)
group = moveit_commander.MoveGroupCommander("manipulator")
display_trajectory_publisher = rospy.Publisher(
    '/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory)  # publisher that publishes a plan to the topic: '/move_group/display_planned_path'
tf_listener = tf.TransformListener()
tf_broadcaster = tf.TransformBroadcaster()


###___JOINT VALUE MANIPULATION___###
# Manipulate by assigning joint values
def assign_joint_value(joint_0, joint_1, joint_2, joint_3, joint_4, joint_5):
    group.set_max_velocity_scaling_factor(0.1)
    # create variable that stores joint values
    group_variable_values = group.get_current_joint_values()

    # Assign values to joints
    group_variable_values[0] = joint_0
    group_variable_values[1] = joint_1
    group_variable_values[2] = joint_2
    group_variable_values[3] = joint_3
    group_variable_values[4] = joint_4
    group_variable_values[5] = joint_5

    # set target joint values for 'manipulator' group
    group.set_joint_value_target(group_variable_values)

    plan1 = group.plan()  # call plan function to plan the path (visualize on rviz)
    group.go(wait=True)  # execute plan on real/simulation (gazebo) robot
    rospy.sleep(2)  # sleep 2 seconds


##___POSE TARGET MANIPULATION___###
# Manipulate by assigning pose target
def assign_pose_target(pos_x, pos_y, pos_z, orient_x, orient_y, orient_z, orient_w):
    group.set_max_velocity_scaling_factor(0.1)
    # create a pose variable. The parameters can be seen from "$ rosmsg show Pose"
    pose_target = group.get_current_pose()

    # Assign values
    if pos_x == 'nil':
        pass
    else:
        pose_target.pose.position.x = pos_x
    if pos_y == 'nil':
        pass
    else:
        pose_target.pose.position.y = pos_y
    if pos_z == 'nil':
        pass
    else:
        pose_target.pose.position.z = pos_z
    if orient_x == 'nil':
        pass
    else:
        pose_target.pose.orientation.x = orient_x
    if orient_y == 'nil':
        pass
    else:
        pose_target.pose.orientation.y = orient_y
    if orient_z == 'nil':
        pass
    else:
        pose_target.pose.orientation.z = orient_z
    if orient_w == 'nil':
        pass
    else:
        pose_target.pose.orientation.w = orient_w

    # set pose_target as the goal pose of 'manipulator' group
    group.set_pose_target(pose_target)

    plan2 = group.plan()  # call plan function to plan the path
    group.go(wait=True)  # execute plan on real/simulation robot
    rospy.sleep(2)  # sleep 5 seconds


###___RELATIVE JOINT VALUE MANIPULATION___###
# Manipulate by assigning relative joint values w.r.t. current joint values of robot
def relative_joint_value(joint_0, joint_1, joint_2, joint_3, joint_4, joint_5):
    group.set_max_velocity_scaling_factor(0.1)
    # create variable that stores joint values
    group_variable_values = group.get_current_joint_values()

    # Assign values to joints
    group_variable_values[0] += joint_0
    group_variable_values[1] += joint_1
    group_variable_values[2] += joint_2
    group_variable_values[3] += joint_3
    group_variable_values[4] += joint_4
    group_variable_values[5] += joint_5

    # set target joint values for 'manipulator' group
    group.set_joint_value_target(group_variable_values)

    plan1 = group.plan()  # call plan function to plan the path (visualize on rviz)
    group.go(wait=True)  # execute plan on real/simulation (gazebo) robot
    rospy.sleep(2)  # sleep 2 seconds


###___RELATIVE POSE TARGET MANIPULATION___###
# Manipulate by moving gripper linearly with respect to world frame
def relative_pose_target(axis_world, distance):
    group.set_max_velocity_scaling_factor(0.1)
    # create a pose variable. The parameters can be seen from "$ rosmsg show Pose"
    pose_target = group.get_current_pose()
    if axis_world == 'x':
        pose_target.pose.position.x += distance
    if axis_world == 'y':
        pose_target.pose.position.y += distance
    if axis_world == 'z':
        pose_target.pose.position.z += distance
    # set pose_target as the goal pose of 'manipulator' group
    group.set_pose_target(pose_target)

    plan2 = group.plan()  # call plan function to plan the path
    group.go(wait=True)  # execute plan on real/simulation robot
    rospy.sleep(2)  # sleep 5 seconds


###___STATUS ROBOT___###
def manipulator_status():
    # You can get a list with all the groups of the robot like this:
    print("Robot Groups:")
    print(robot.get_group_names())

    # You can get the current values of the joints like this:
    print("Current Joint Values:")
    print(group.get_current_joint_values())

    # You can also get the current Pose of the end effector of the robot like this:
    print("Current Pose:")
    print(group.get_current_pose())

    # Finally you can check the general status of the robot like this:
    print("Robot State:")
    print(robot.get_current_state())


###___MAIN___###
if __name__ == '__main__':
    try:
        # assign_joint_value(2,-1,-1,-2,3,1.5)
        # relative_joint_value(0,0,0,0,0,3.14)
        # assign_pose_target(-0.52, 0.1166, 0.22434, 0.0, 0.707, -0.707, 0.0)
        relative_joint_value(0,0,0,0,0,3.14)

        # manipulator_status()

        moveit_commander.roscpp_shutdown()

    except rospy.ROSInterruptException:
        pass
